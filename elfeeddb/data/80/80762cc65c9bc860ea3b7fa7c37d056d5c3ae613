<p>It’s been a year since the first release of
<a href="http://www.wilfred.me.uk/blog/2017/08/30/helpful-adding-contextual-help-to-emacs/">Helpful</a>!
It’s gained a ton of new features, and I’d love to share the
highlights with you.</p>

<h2 id="tool-integration">Tool Integration</h2>

<p><img src="http://www.wilfred.me.uk/assets/helpful_more_debugging.png" /></p>

<p>Emacs has some excellent built-in debugging tools that I wanted to
expose within Helpful. These tools missed the first release, but I’ve now
had the chance to build them.</p>

<p>From a Helpful buffer, you can now toggle edebug on a function. This
allows you to easily step through code.</p>

<p>You can also toggle tracing. Tracing is an underrated built-in feature
of Emacs. You can use it to confirm functions have the inputs and
outputs you’re expecting. It’s really useful when exploring unfamiliar
code.</p>

<p><img src="http://www.wilfred.me.uk/assets/emacs_trace.png" /></p>

<p>In this example, I’ve enabled tracing on <code class="highlighter-rouge">projectile-project-root</code> to
see when it’s called, and what values it’s returning.</p>

<h2 id="summaries">Summaries</h2>

<p>After some great user feedback, Helpful buffers now start with a
summary of what you’re looking at.</p>

<p><img src="http://www.wilfred.me.uk/assets/projectile_intro.png" /></p>

<p>Users often want a direct link to the source code, so this is included
in the summary. Helpful also mentions if a function is interactive or
autoloaded, just like <code class="highlighter-rouge">describe-function</code>. If a user doesn’t know what
that means, those words now link to the relevant part of the Emacs
manual!</p>

<h2 id="aliases">Aliases</h2>

<p>Helpful tries to show all relevant information for the current
thing. I’ve overhauled aliases with this in mind.</p>

<p><img src="http://www.wilfred.me.uk/assets/obsolete_alias.png" /></p>

<p>For example, if you view <code class="highlighter-rouge">make-hash-table</code>, you can now see that there
is another alias of this function, but it’s now deprecated.</p>

<h2 id="modifying-variables">Modifying Variables</h2>

<p><img src="http://www.wilfred.me.uk/assets/helpful_set_variable.png" /></p>

<p>It’s now possible to set variables directly from Helpful buffers. This
was inspired by <code class="highlighter-rouge">counsel-set-variable</code>, which has an excellent similar
feature.</p>

<p>If a variable is a <code class="highlighter-rouge">defcustom</code>, then Helpful also includes a link to
the relevant part of Customize.</p>

<h2 id="even-better-docstrings">Even Better Docstrings</h2>

<p>Helpful now handles all Emacs docstring syntax. It handles references
to keybindings, keymaps, and even supports the obscure features like
<code class="highlighter-rouge">\&lt;foo-map&gt;</code> and <code class="highlighter-rouge">\='</code>.</p>

<p><img src="http://www.wilfred.me.uk/assets/fortran_mode.png" /></p>

<p><code class="highlighter-rouge">fortran-mode</code> is a great example of a docstring that uses a lot of
Emacs docstring features.</p>

<p>Recent versions of Helpful try even harder to save you
keystrokes. URLs are now automatically converted to links.</p>

<p>Finally, my favourite new feature is Info manual links. If a docstring
mentions a section of the manual, Helpful converts it to a link.</p>

<p><img src="http://www.wilfred.me.uk/assets/helpful_info_reference.png" /></p>

<p>Even better, if a symbol is documented in the Emacs manual, Helpful
automatically adds a link at the bottom of the docstring! This hugely
helps discoverability.</p>

<p><img src="http://www.wilfred.me.uk/assets/helpful_view_in_manual.png" /></p>

<h2 id="installing-it">Installing It</h2>

<p><a href="https://github.com/Wilfred/helpful">Helpful</a> is available on
<a href="http://www.melpa.org/#/helpful">MELPA</a> and <a href="https://stable.melpa.org/#/helpful">MELPA
stable</a>. It’s become an
indispensable part of my Emacs workflow, and I’m sure it will benefit
you too.</p>