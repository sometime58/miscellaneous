<p>Ah, Emacs Lisp.  There are many reasons for loving and hating it.  I
disagree with most people name when they argue why the language sucks<a class="footnote-reference" href="http://emacsninja.com/emacs.atom#id4" id="id1">[1]</a>, for me it’s mostly two things that end up mattering in practice:</p>
<ol class="arabic simple">
<li>The APIs are terrible.  Font-locking is an enigma.  It’s common for
packages to use synchronous APIs because it’s far easier to do than
The Right Thing™.  Moving through buffers and editing them makes
for incomprehensible <em>and</em> stateful code.  I could go on, but most
of these can be mitigated by writing your own APIs as you figure
things out.  This is not what this blog post is about.</li>
<li>There is no namespace or module system.  This means that every
global identifier could end up clashing with another one unless you
emulate namespacing by adding a unique prefix.  While this could be
fixed, it’s unlikely to happen<a class="footnote-reference" href="http://emacsninja.com/emacs.atom#id5" id="id2">[2]</a>.  Interestingly enough this
situation is similar to C, but worse as there’s no visibility
control, only the convention of using a double dash for global
identifiers not considered public.  This annoys me as I have to
type out a potentially long prefix every time.  This is what this
blog post is about.</li>
</ol>
<p>I initially considered one of the namespace packages.  It would make
for as little typing as possible, however this would require an
additional dependency and break my existing workflows.  Therefore I
went for the alternative route, writing a command that inserts the
package prefix of the current buffer at point.  Bind that command to
an easily reachable key binding and you’d save nearly as much effort
with typing.</p>
<pre class="code elisp literal-block"><span class="p">(</span><span class="nb">defvar-local</span> <span class="nv">my-current-package-prefix</span> <span class="no">nil</span><span class="p">)</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">my-ensure-trailing-dash</span> <span class="p">(</span><span class="nf">string</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="k">and</span> <span class="p">(</span><span class="nv">not</span> <span class="p">(</span><span class="nv">zerop</span> <span class="p">(</span><span class="nf">length</span> <span class="nf">string</span><span class="p">)))</span>
           <span class="p">(</span><span class="nv">not</span> <span class="p">(</span><span class="nf">=</span> <span class="p">(</span><span class="nf">aref</span> <span class="nf">string</span> <span class="p">(</span><span class="nf">1-</span> <span class="p">(</span><span class="nf">length</span> <span class="nf">string</span><span class="p">)))</span> <span class="sc">?-</span><span class="p">)))</span>
      <span class="p">(</span><span class="nf">concat</span> <span class="nf">string</span> <span class="s">"-"</span><span class="p">)</span>
    <span class="nf">string</span><span class="p">))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">my-guess-current-package-prefix</span> <span class="p">(</span><span class="nv">arg</span><span class="p">)</span>
  <span class="p">(</span><span class="k">save-excursion</span>
    <span class="p">(</span><span class="nf">goto-char</span> <span class="p">(</span><span class="nf">point-min</span><span class="p">))</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="k">and</span> <span class="p">(</span><span class="nv">not</span> <span class="nv">arg</span><span class="p">)</span>
             <span class="p">(</span><span class="nf">re-search-forward</span> <span class="s">"^(defgroup \\(\\w+\\)"</span> <span class="no">nil</span> <span class="no">t</span><span class="p">))</span>
        <span class="p">(</span><span class="k">setq</span> <span class="nv">my-current-package-prefix</span>
              <span class="p">(</span><span class="nv">my-ensure-trailing-dash</span> <span class="p">(</span><span class="nv">match-string</span> <span class="mi">1</span><span class="p">)))</span>
      <span class="p">(</span><span class="k">setq</span> <span class="nv">my-current-package-prefix</span>
            <span class="p">(</span><span class="nv">my-ensure-trailing-dash</span>
             <span class="p">(</span><span class="nf">read-string</span> <span class="s">"Package prefix: "</span>
                          <span class="nv">my-current-package-prefix</span><span class="p">))))))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">my-insert-current-package-prefix</span> <span class="p">(</span><span class="nv">arg</span><span class="p">)</span>
  <span class="p">(</span><span class="k">interactive</span> <span class="s">"P"</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="k">or</span> <span class="p">(</span><span class="nv">not</span> <span class="nv">my-current-package-prefix</span><span class="p">)</span> <span class="nv">arg</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">my-guess-current-package-prefix</span> <span class="nv">arg</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">insert</span> <span class="nv">my-current-package-prefix</span><span class="p">))</span>

<span class="p">(</span><span class="nb">with-eval-after-load</span> <span class="ss">'elisp-mode</span>
  <span class="p">(</span><span class="nf">define-key</span> <span class="nv">emacs-lisp-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">"C-."</span><span class="p">)</span>
              <span class="ss">'my-insert-current-package-prefix</span><span class="p">))</span>
</pre>
<p>Guessing the prefix is done by looking for a <tt class="docutils literal">(defgroup <span class="pre">...)</span></tt> form
which is a good enough indicator for a prefix<a class="footnote-reference" href="http://emacsninja.com/emacs.atom#id6" id="id3">[3]</a>.  In case it’s not
given, the above code prompts for a prefix and allows resetting it
with a prefix argument.  The trickiest part is ensuring the prefix
ends with a dash.  You could optimize this even further by looking
whether a prefix has already been inserted, but honestly, undoing the
change is simple enough.</p>
<p>Let’s see whether this reignites my drive to write more Emacs
packages…</p>
<table class="docutils footnote" frame="void" id="id4" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="http://emacsninja.com/emacs.atom#id1">[1]</a></td><td>Who cares if it’s slow?  Who cares about the lack of regex
literals?  Yes, it’s not &lt;insert your favorite language&gt;.
Despite all of this people wrote lots of it, far more than any
of the haters would.  Feel free to dream about an Emacs
rewritten in something else, but it’s going to stay a pipe
dream if that’s all you do.  The topic deserves a separate blog
post because it’s a common phenomenon in the Emacs community to
place irrational hopes in a re-implementation to succeed the
status quo.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id5" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="http://emacsninja.com/emacs.atom#id2">[2]</a></td><td>The topic came up on emacs-devel before, the main problem is
that the tooling would need to be updated.  Simple workflows
the core team is used to (such as grepping the qualified name)
would completely break apart.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id6" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="http://emacsninja.com/emacs.atom#id3">[3]</a></td><td>An even better indicator would be the <tt class="docutils literal">:prefix</tt> option inside
<tt class="docutils literal">(defgroup <span class="pre">...)</span></tt>, but let’s not go overboard.</td></tr>
</tbody>
</table>