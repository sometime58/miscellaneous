<h1 id="bye-bye-elbank">Bye bye Elbank</h1>

<p>I have to start this post with this: I will not be actively maintaining
<a href="https://github.com/NicolasPetton/elbank">Elbank</a> anymore, simply because I
switched back to <a href="https://www.ledger-cli.org/">Ledger</a>.  If someone wants to
take over, please contact me!</p>

<p>The main reason for switching is budgeting.  While Elbank was a cool experiment,
it is not an accounting software, and inherently lacks support for powerful
budgeting.</p>

<p>When I started working on Elbank as a replacement for Ledger, I was looking for
a reporting tool within Emacs that would fetch bank transactions automatically,
so I wouldn’t have to enter transactions by hand (this is a seriously tedious
task, and I grew tired of doing it after roughly two years, and finally gave up).</p>

<p>Since then, I learned about ledger-autosync and boobank, which I use to sync my
bank statements with Ledger (more about that in another post).</p>

<h1 id="ynabs-way-of-budgeting">YNAB’s way of budgeting</h1>

<p>I only came across <a href="https://ynab.com">YNAB</a> recently.  While I won’t use their
software (being a non-free web application, and, you know… there’s no <code class="highlighter-rouge">M-x
ynab</code>), I think that the principles behind it are really appealing for personal
budgeting. I encourage you to <a href="https://www.youneedabudget.com/method/">read more about
it</a> (or grab a <a href="https://www.youneedabudget.com/book-order-now/">copy of the
book</a>, it’s great), but here’s
the idea.</p>

<ol>
  <li>
    <p><strong>Budget every euro</strong>: Quite simple once you get it. Every single Euro you have
should be in a budget envelope. You should assign a job to every Euro you
earn (that’s called
<a href="https://en.wikipedia.org/wiki/Zero-based_budgeting">zero-based</a>, <a href="https://en.wikipedia.org/wiki/Envelope_system">envelope
system</a>).</p>
  </li>
  <li>
    <p><strong>Embrace your true expenses</strong>: Plan for larger and less frequent expenses, so
when a yearly bill arrives, or your car breaks down, you’ll be covered.</p>
  </li>
  <li>
    <p><strong>Roll with the punches</strong>: Address overspending as it happens by taking money
overspent from another envelope.  As long as you keep budgeting, you’re
succeeding.</p>
  </li>
  <li>
    <p><strong>Age your money</strong>: Spend less than you earn, so your money stays in the bank
account longer.  As you do that, the age of your money will grow, and once
you reach the goal of spending money that is at least one month old, you
won’t worry about that next bill.</p>
  </li>
</ol>

<h1 id="implementation-in-ledger">Implementation in Ledger</h1>

<p>I assume that you are familiar with Ledger, but if not I recommend reading its
great
<a href="https://www.ledger-cli.org/3.0/doc/ledger3.html#Introduction-to-Ledger">introduction</a>
and <a href="https://www.ledger-cli.org/3.0/doc/ledger3.html#Ledger-Tutorial">tutorial</a>.</p>

<p>The implementation in Ledger uses plain double-entry accounting.  I took most of
it from
<a href="http://sachachua.com/blog/2014/11/keeping-financial-score-ledger/">Sacha</a>, with
some minor differences.</p>

<h2 id="budgeting-new-money">Budgeting new money</h2>

<p>After each income transaction, I budget the new money:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>2018-06-12 Employer
    Assets:Bank:Checking                        1600.00 EUR
    Income:Salary                              -1600.00 EUR

2018-06-12 Budget
    [Assets:Budget:Food]                         400.00 EUR
    [Assets:Budget:Rent]                         600.00 EUR
    [Assets:Budget:Utilities]                    600.00 EUR
    [Equity:Budget]                            -1600.00 EUR
</code></pre>
</div>

<p>Did you notice the square brackets around the accounts of the budget
transaction? It’s a feature Ledger calls <a href="https://www.ledger-cli.org/3.0/doc/ledger3.html#Virtual-postings">virtual
postings</a>. These
postings are not considered real, and won’t be present in any report that uses
the <code class="highlighter-rouge">--real</code> flag.  This is exactly what we want, since it’s a budget allocation
and not a “real” transaction.  Therefore we’ll use the <code class="highlighter-rouge">--real</code> flag for all
reports except for our budget report.</p>

<h2 id="automatically-crediting-budget-accounts-when-spending-money">Automatically crediting budget accounts when spending money</h2>

<p>Next, we need to credit the budget accounts each time we spend money.  Ledger
has another neat feature called <a href="https://www.ledger-cli.org/3.0/doc/ledger3.html#Automated-Transactions">automated
transactions</a>
for this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>= /Expenses/
    [Assets:Budget:Unbudgeted]                    -1.0
    [Equity:Budget]                                1.0

= /Expenses:Food/
    [Assets:Budget:Food]                          -1.0
    [Assets:Budget:Unbudgeted]                     1.0
	
= /Expenses:Rent/
    [Assets:Budget:Rent]                          -1.0
    [Assets:Budget:Unbudgeted]                     1.0
	
= /Expenses:Utilities/
    [Assets:Budget:Utilities]                     -1.0
    [Assets:Budget:Unbudgeted]                     1.0
</code></pre>
</div>

<p>Every expense is taken out of the <code class="highlighter-rouge">Assets:Budget:Unbudgeted</code> account by default.</p>

<p>This forces me to budget properly, as <code class="highlighter-rouge">Assets:Budget:Unbudgeted</code> should always
be 0 (if it is not the case I immediately know that there is something wrong
going on).</p>

<p>All other automatic transactions take money out of the
<code class="highlighter-rouge">Assets:Budget:Unbudgeted</code> account instead of <code class="highlighter-rouge">Equity:Budget</code> account.</p>

<h2 id="a-budget-report">A Budget report</h2>

<p>This is the final piece of the puzzle.  Here’s the budget report command:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>ledger --empty -S -T -f ledger.dat bal ^assets:budget
</code></pre>
</div>

<p>If we have the following transactions:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>2018/06/12 Groceries store
    Expenses:Food                                123.00 EUR
    Assets:Bank:Checking

2018/06/12 Landlord
    Expenses:Rent                                600.00 EUR
    Assets:Bank:Checking

2018/06/12 Internet provider
    Expenses:Utilities:Internet                   40.00 EUR
    Assets:Bank:Checking
</code></pre>
</div>

<p>Here’s what the report looks like:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>          837.00 EUR  Assets:Budget
          560.00 EUR    Utilities
          277.00 EUR    Food
                   0    Rent
                   0    Unbudgeted
--------------------
          837.00 EUR
</code></pre>
</div>

<h1 id="conclusion">Conclusion</h1>

<p>Ledger is amazingly powerful, and provides a great framework for YNAB-like
budgeting.  In a future post I’ll explain how I automatically import my bank
transactions using a mix of <code class="highlighter-rouge">ledger-autosync</code> and <code class="highlighter-rouge">weboob</code>.</p>