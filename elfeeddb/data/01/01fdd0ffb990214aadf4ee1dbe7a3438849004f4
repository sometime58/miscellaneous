<div><p>
CREATED: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-06-17 Sun&gt;</span></span>
</p>

<p>
UPDATED: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-09-06 Thu&gt;</span></span>
</p>

<p>
<a href="http://blog.binchen.org/posts/effective-spell-check-in-emacs.html">This article</a> explains how to spell check name of function and variable while programming in Emacs.
</p>

<p>
It uses options <code>--run-together</code> from <a href="http://aspell.net/">GNU Aspell</a> to check camel cased word.
</p>

<p>
But this solution is not perfect. It wrongly identifies two character interior word as typo. For example, "onChange" is identified as typo because the interior word "on". Another issue is namespace of function name. For example, "MS" from "MSToggleButton" is alias of "Microsoft". If "MS" is identified as typo, every word containing namespace "MS" is regarded as typo.
</p>

<p>
In this article,
</p>

<ul class="org-ul">
<li>I will explain <b>how Emacs spell checker works</b></li>
<li>Then we study the <b>algorithm of aspell</b> (We can learn nothing from hunspell because <b>hunspell can NOT check camel case word at all</b>)</li>
<li>Finally, I will show you <b>a complete solution</b> which works with <b>either aspell or hunspell</b></li>
</ul>

<p>
In Emacs, a built in plugin <a href="https://www.emacswiki.org/emacs/FlySpell">Fly Spell</a> is in charge of spell check. It passes the options and plain text to command line tool aspell. Aspell sends back the typos of text into <code>Fly Spell</code>. <code>Fly Spell</code> then select certain typos to display. For example, when <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html">flyspell-prog-mode</a> is on, only typos in comments and strings are visible.
</p>

<p>
So aspell doesn't understand syntax of any programming language. It scans plain text and report all typos to Fly Spell.
</p>

<p>
In aspell, there are two extra "run-together" word options:
</p>

<ul class="org-ul">
<li><code>--run-together-limit</code> is "Maximum number of words can be strung together"</li>
<li><code>--run-together-min</code> is "Minimal length of interior words"</li>
</ul>

<p>
Let's study the code of aspell to understand these two options. The "run-together" algorithm in implemented in function <code>Working::check_word</code> of file "modules/speller/default/suggest.cpp".
</p>

<p>
In order to help you understand this function, I documented the code line by line,
</p>

<div class="org-src-container">

<pre><code class="lang-c">class Working : public Score {
  unsigned check_word(char * word, char * word_end, CheckInfo * ci, unsigned pos = 1);
};
unsigned Working::check_word(char * word, char * word_end,  CheckInfo * ci,
                             /* it WILL modify word */
                             unsigned pos)
{
  // check the whole word before go into run-together mode
  unsigned res = check_word_s(word, ci);
  // if `res` is true, it's a valid word, don't bother run-together
  if (res) return pos + 1;
  // it's typo because number of interior words is greater than "--run-together-limit"
  if (pos + 1 &gt;= sp-&gt;run_together_limit_) return 0;

  // `i` is the `end` of interior word, the poition AFTER last character of interior word
  for (char * i = word + sp-&gt;run_together_min_; 
       // already checked the whole word; besides, any interior word whose size is less 
       // than "--run-together-min" is regarded as invalid
       i &lt;= word_end - sp-&gt;run_together_min_;
       ++i)
  {
    char t = *i;

    // read the interior word by set the character at `end` position to '\0'
    *i = '\0';
    res = check_word_s(word, ci);
    // restore original character at `end` position
    *i = t;

    // Current interior word is invalid, we need append the character at current
    //  `end` position to creata new interior word.
    //  Inncrement `i` because `i` always points to the `end` of interior word
    if (!res) continue;

    // Current interior word is valid, strip it from the whole word to create a totally
    // new word for `check_word`, `check_word` is a recursive function
    res = check_word(i, word_end, ci + 1, pos + 1);
    if (res) return res;
  }
  memset(ci, 0, sizeof(CheckInfo));
  return 0;
}
</code></pre>

</div>

<p>
Let's use "hisHelle" as demo how <code>check_word</code> runs:
</p>

<ul class="org-ul">
<li>"word" points to string "hisHelle" (in C/C++, string is character array. The last character of array is character '\0')</li>
<li>"sp-&gt;run_together_min_" is 3, so "i" initially points to the character "H", at the end of interior word "his"</li>
<li>"check_word_s" return "true" for interior word "his"</li>
<li>So we strip "his" from "hisHelle" and recursively call "check_word" to check new word "Helle"</li>
<li>In the new context of "check_word", we extract "Hel" from "Helle" initially</li>
<li>"Hel" is invalid. So we extract "Hell" from "Helle" and get new word "e" and recursively apply "check_word" on "e"</li>
<li>"e" is not valid and at the end of recursion. So "hisHelle" is a typo</li>
</ul>

<p>
Here is our conclusion after studying the code:
</p>

<ul class="org-ul">
<li><code>--run-together-limit</code> could not be bigger if your computer got enough memory. It's default value is 8. I prefer 16.</li>
<li><code>--run-together-min</code> can't be 2 because too many typos are combination of "correct" two character interior words ("hehe", "isme", â€¦)</li>
<li><code>--run-together-min</code> can't be greater than 3, or else, too many "correct" three character interior words are regarded as invalid ("his", "her", "one", "two")</li>
<li><code>--run-together-min</code> should always be 3 which is its default value. Actually, it should never be tweak-able by user at the beginning</li>
</ul>

<p>
Since <code>--run-together-min</code> is 3. the word "onChange" is always regarded as typo because of two character interior word "on". Since there is nothing we can do at aspell side, we have to turn to Emacs to fix this problem.
</p>

<p>
When Emacs got potential typo on Emacs side, we can strip out all the two character interior word from original word and spell check new word again.
</p>

<p>
Please note <code>hunspell</code> can't check camel case word at all while aspell can check camel case word but with a little noise. So there is nothing we can study in hunspell.
</p>

<p>
We will use Emacs Lisp to solve this problem completely, using <b>either aspell or hunspell</b>.
</p>

<p>
We can attach a predicate into specific major-mode. The predicate return <code>t</code> if current word at cursor is typo,
</p>

<div class="org-src-container">

<pre><code class="lang-lisp">(defun js-flyspell-verify ()
  (let* ((font-face (get-text-property (- (point) 1) 'face))
         (word (thing-at-point 'word)))
    (message "font-face=%s word=%s" font-face word)
    t))
(put 'js2-mode 'flyspell-mode-predicate 'js-flyspell-verify)
</code></pre>

</div>

<p>
As you can see from above code, we have full control on what typos should be displayed in <code>js-flyspell-verify</code>. So <code>predicate</code> is actually the last chance to fix wrongly identified typos.
</p>

<p>
Here is complete setup you can paste into <code>.emacs</code> (I setup for <code>js2-mode</code> and <code>rjsx-mode</code> but code is generic enough).
</p>

<p>
Please note function <code>split-camel-case</code> split a camel case word into a list of sub-words. I just assume any sub-word whose length is less than three is not a typo.
</p>

<div class="org-src-container">

<pre><code class="lang-lisp">(defun split-camel-case (word)
  "Split camel case WORD into a list of strings.
Ported from 'https://github.com/fatih/camelcase/blob/master/camelcase.go'."
  (let* ((case-fold-search nil)
         (len (length word))
         ;; ten sub-words is enough
         (runes [nil nil nil nil nil nil nil nil nil nil])
         (runes-length 0)
         (i 0)
         ch
         (last-class 0)
         (class 0)
         rlt)

    ;; split into fields based on class of character
    (while (&lt; i len)
      (setq ch (elt word i))
      (cond
       ;; lower case
       ((and (&gt;= ch ?a) (&lt;= ch ?z))
        (setq class 1))
       ;; upper case
       ((and (&gt;= ch ?A) (&lt;= ch ?Z))
        (setq class 2))
       ((and (&gt;= ch ?0) (&lt;= ch ?9))
        (setq class 3))
       (t
        (setq class 4)))

      (cond
       ((= class last-class)
        (aset runes
              (1- runes-length)
              (concat (aref runes (1- runes-length)) (char-to-string ch))))
       (t
        (aset runes runes-length (char-to-string ch))
        (setq runes-length (1+ runes-length))))
      (setq last-class class)
      ;; end of while
      (setq i (1+ i)))

    ;; handle upper case -&gt; lower case sequences, e.g.
    ;;     "PDFL", "oader" -&gt; "PDF", "Loader"
    (setq i 0)
    (while (&lt; i (1- runes-length))
      (let* ((ch-first (aref (aref runes i) 0))
             (ch-second (aref (aref runes (1+ i)) 0)))
        (when (and (and (&gt;= ch-first ?A) (&lt;= ch-first ?Z))
                   (and (&gt;= ch-second ?a) (&lt;= ch-second ?z)))
          (aset runes (1+ i) (concat (substring (aref runes i) -1) (aref runes (1+ i))))
          (aset runes i (substring (aref runes i) 0 -1))))
      (setq i (1+ i)))

    ;; construct final result
    (setq i 0)
    (while (&lt; i runes-length)
      (when (&gt; (length (aref runes i)) 0)
        (setq rlt (add-to-list 'rlt (aref runes i) t)))
      (setq i (1+ i)))
     rlt))

(defun flyspell-detect-ispell-args (&amp;optional run-together)
  "If RUN-TOGETHER is true, spell check the CamelCase words.
Please note RUN-TOGETHER will make aspell less capable. So it should only be used in prog-mode-hook."
  ;; force the English dictionary, support Camel Case spelling check (tested with aspell 0.6)
  (let* ((args (list "--sug-mode=ultra" "--lang=en_US"))args)
    (if run-together
        (setq args (append args '("--run-together" "--run-together-limit=16"))))
    args))

;; {{ for aspell only, hunspell does not need setup `ispell-extra-args'
(setq ispell-program-name "aspell")
(setq-default ispell-extra-args (flyspell-detect-ispell-args t))
;; }}

;; ;; {{ hunspell setup, please note we use dictionary "en_US" here
;; (setq ispell-program-name "hunspell")
;; (setq ispell-local-dictionary "en_US")
;; (setq ispell-local-dictionary-alist
;;       '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
;; ;; }}

(defvar extra-flyspell-predicate '(lambda (word) t)
  "A callback to check WORD.  Return t if WORD is typo.")

(defun my-flyspell-predicate (word)
  "Use aspell to check WORD.  If it's typo return t."
  (let* ((cmd (cond
               ;; aspell: `echo "helle world" | aspell pipe`
               ((string-match-p "aspell$" ispell-program-name)
                (format "echo \"%s\" | %s pipe"
                        word
                        ispell-program-name))
               ;; hunspell: `echo "helle world" | hunspell -a -d en_US`
               (t
                (format "echo \"%s\" | %s -a -d en_US"
                        word
                        ispell-program-name))))
         (cmd-output (shell-command-to-string cmd))
         rlt)
    ;; (message "word=%s cmd=%s" word cmd)
    ;; (message "cmd-output=%s" cmd-output)
    (cond
     ((string-match-p "^&amp;" cmd-output)
      ;; it's a typo because at least one sub-word is typo
      (setq rlt t))
     (t
      ;; not a typo
      (setq rlt nil)))
    rlt))

(defun js-flyspell-verify ()
  (let* ((case-fold-search nil)
         (font-matched (memq (get-text-property (- (point) 1) 'face)
                             '(js2-function-call
                               js2-function-param
                               js2-object-property
                               js2-object-property-access
                               font-lock-variable-name-face
                               font-lock-string-face
                               font-lock-function-name-face
                               font-lock-builtin-face
                               rjsx-text
                               rjsx-tag
                               rjsx-attr)))
         subwords
         word
         (rlt t))
    (cond
     ((not font-matched)
      (setq rlt nil))
     ;; ignore two character word
     ((&lt; (length (setq word (thing-at-point 'word))) 2)
      (setq rlt nil))
     ;; handle camel case word
     ((and (setq subwords (split-camel-case word)) (&gt; (length subwords) 1))
      (let* ((s (mapconcat (lambda (w)
                             (cond
                              ;; sub-word wholse length is less than three
                              ((&lt; (length w) 3)
                               "")
                               ;; special characters
                              ((not (string-match-p "^[a-zA-Z]*$" w))
                               "")
                              (t
                               w))) subwords " ")))
        (setq rlt (my-flyspell-predicate s))))
     (t
      (setq rlt (funcall extra-flyspell-predicate word))))
    rlt))

(put 'js2-mode 'flyspell-mode-predicate 'js-flyspell-verify)
(put 'rjsx-mode 'flyspell-mode-predicate 'js-flyspell-verify)
</code></pre>

</div>

<p>
Optionally, you could see <a href="https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-spelling.el">https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-spelling.el</a> for my real world setup.
</p>

<p>
UPDATE:
Now you can use <a href="https://github.com/redguardtoo/wucuo">wucuo</a> which is complete and out of box solution to spell check code.</p></div>