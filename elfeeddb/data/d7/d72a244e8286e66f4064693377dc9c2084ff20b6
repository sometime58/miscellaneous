<p>In the past Emacs was communicating w/ gnupg directly &amp; hence was responsible for reading/sending/catching passwords. In contrast, Emacs 26.1, by default, fully delegates the password handling to gpg2.</p>  <p>The code for the interoperation w/ gpg1 is still present in the Emacs core, but it's no longer advertised in favour of gpg2 + <a href="https://elpa.gnu.org/packages/pinentry.html">elpa pinentry</a>.</p>  <p>If you don't want an additional overhead or a special gpg-agent setup, it's still possible to use gpg1 for (en|de)crypting ops.</p>  <p>Say we have a text file we want to encrypt &amp; then transparently edit in Emacs afterwards. The editor should remember the correct pw for the file &amp; not bother us w/ the pw during the file saving op.</p>  <pre><code>$ rpm -qf `which gpg gpg2`<br />gnupg-1.4.22-6.fc28.x86_64<br />gnupg2-2.2.6-1.fc28.x86_64<br /><br />$ echo rain raine goe away, little Johnny wants to play | gpg -c &gt; nr.gpg<br />$ file nr.gpg<br />nr.gpg: GPG symmetrically encrypted data (AES cipher)</code></pre>  <p>If you have both gpg1 &amp; gpg2 installed, Emacs ignores gpg1 completely. E.g., run '<code>emacs -Q</code>' &amp; open <code>nr.gpg</code> fileâ€“gpg2 promptly contacts gpg-agent, which, in turn, runs the pinentry app:</p>  <p><a href="http://1.bp.blogspot.com/-0YTjAuFnZoM/WxD1Acid4tI/AAAAAAAAAtg/JBPwntXC9VQI_R-0Ye1lfqifjD7eXt6qACK4BGAYYCw/s1600/bm-image-753041.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_6562014045088375506" src="http://1.bp.blogspot.com/-0YTjAuFnZoM/WxD1Acid4tI/AAAAAAAAAtg/JBPwntXC9VQI_R-0Ye1lfqifjD7eXt6qACK4BGAYYCw/s320/bm-image-753041.png" /></a></p>  <p>Although, it may look as if everything is alright, try to edit the decrypted file &amp; then save it. The pinentry window will reappear &amp; you'll be forced to enter the pw <em>twice</em>.</p>  <p>The Emacs mode that handles the gnupg dispatch is called EasyPG Assistant. To check its current state, use <code>epg-find-configuration</code> fn:</p>  <pre><code>ELISP&gt; (car (epg-find-configuration 'OpenPGP))<br />(program . "/usr/bin/gpg2")</code></pre>  <p>We can force EasyPG to use gpg1, despite that it's not documented anywhere.</p>  <p>The actual config data is located in <code>epg-config--program-alist</code> var:</p>  <pre><code>ELISP&gt; epg-config--program-alist<br />((OpenPGP epg-gpg-program<br />      ("gpg2" . "2.1.6")<br />      ("gpg" . "1.4.3"))<br /> (CMS epg-gpgsm-program<br />      ("gpgsm" . "2.0.4")))</code></pre>  <p>Here, if we shadow the <code>gpg2</code> entry in the alist, EasyPG would regenerate a new config for all the (en|de)crypting ops on the fly:</p>  <pre><code>(require 'epg-config)<br />(add-to-list 'epg-config--program-alist `(OpenPGP epg-gpg-program ("gpg" . ,epg-gpg-minimum-version)))<br />(setq epa-file-cache-passphrase-for-symmetric-encryption t)<br />(setq epg--configurations nil)</code></pre>  <p>Now, if you open <code>nr.gpg</code> afresh, Emacs neither should use the gpg-agent any more:</p>  <p><a href="http://1.bp.blogspot.com/-5C48xw9GBBU/WxD1AiVsfvI/AAAAAAAAAto/G3LTn9WNKfEQqw71PGQlrP4T44mxTuETgCK4BGAYYCw/s1600/bm-image-754228.png"><img alt="" border="0" id="BLOGGER_PHOTO_ID_6562014046645419762" src="http://1.bp.blogspot.com/-5C48xw9GBBU/WxD1AiVsfvI/AAAAAAAAAto/G3LTn9WNKfEQqw71PGQlrP4T44mxTuETgCK4BGAYYCw/s320/bm-image-754228.png" /></a></p>  <p>Nor should it ask for the pw when you'll do edit+save later on.</p>  <p>To clear the internal pw cache, type</p>  <pre><code>ELISP&gt; (setq epa-file-passphrase-alist nil)</code></pre>